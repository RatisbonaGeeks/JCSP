#include "Parser.h"
#include <regex>


Parser::Parser(string * code)
{
	this->code = *code;
}


Parser::~Parser()
{
}


//////////////////////////////////////////////////////////////
//
//  Basic replace function
//
//////////////////////////////////////////////////////////////
void Parser::replace(string regexstring, string result)
{
	regex exp(regexstring);
	code = regex_replace(code, exp, result);
}

//////////////////////////////////////////////////////////////
//
//  Replace import with #include
//
//////////////////////////////////////////////////////////////
void Parser::REP_import()
{
	replace("import (\\w+)", "#include <inc\\$1.h>");
}

//////////////////////////////////////////////////////////////
//
//  Remove comments (not needed in cpp file)
//
//////////////////////////////////////////////////////////////
void Parser::REM_comments()
{
	replace("[#\\/].+", "");
	replace("\\/\\*[\\s\\w]+\\*\\/", "");
}

//////////////////////////////////////////////////////////////
//
//  Repace main function
//  
//////////////////////////////////////////////////////////////
void Parser::REP_function_void()
{
	replace("func \\w+(\\(.+\\))", "void Main $1");
}


//////////////////////////////////////////////////////////////
//
//  Create a C-Loop
//  ToDo: Curly brackets
//
//////////////////////////////////////////////////////////////
void Parser::REP_for()
{
	replace("for \\((\\w+) ([\\w\\d]+) in (\\d+)\\.\\.\\.(\\d+)\\)", "for ($1 $2 = $3; $2 <= $4; $2++)");
}

//////////////////////////////////////////////////////////////
//
//  Variable declaration conversion
//
//////////////////////////////////////////////////////////////
void Parser::REP_variableDeclaration()
{
	replace("var (\\w+) : (\\w+)", "$2 $1");
}

//////////////////////////////////////////////////////////////
//
//  Convert a as-Cast 
//  ToDo: This will replace all " ... as ...." 
//
//////////////////////////////////////////////////////////////
void Parser::REP_cast()
{
	replace("(\\w+) as (\\w+)", "($2)$1");
}